{
  "uid": "honeyhub-overview",
  "title": "HoneyHub — Service Overview",
  "timezone": "browser",
  "schemaVersion": 39,
  "version": 1,
  "tags": [ "honeyhub", "otel", "dotnet" ],
  "refresh": "10s",
  "time": {
    "from": "now-30m",
    "to": "now"
  },
  "templating": {
    "list": [
      {
        "name": "service",
        "type": "query",
        "datasource": {
          "type": "prometheus",
          "uid": "prometheus"
        },
        "includeAll": true,
        "multi": true,
        "refresh": 2,
        "query": "label_values(process_runtime_dotnet_gc_collections_count, service_name)"
      }
    ]
  },
  "panels": [
    {
      "type": "stat",
      "title": "Requests / sec",
      "gridPos": {
        "x": 0,
        "y": 0,
        "w": 8,
        "h": 6
      },
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "targets": [
        {
          "expr": "sum(rate(http_server_duration_count{service_name=~\"$service\"}[$__rate_interval])) or sum(rate(aspnetcore_requests_per_second{service_name=~\"$service\"}[$__rate_interval]))",
          "legendFormat": "rps"
        }
      ]
    },
    {
      "type": "stat",
      "title": "Error Rate (5xx / sec)",
      "gridPos": {
        "x": 8,
        "y": 0,
        "w": 8,
        "h": 6
      },
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "targets": [
        {
          "expr": "sum(rate(http_server_duration_count{service_name=~\"$service\", http_response_status_code=~\"5..\"}[$__rate_interval]))",
          "legendFormat": "errors/s"
        }
      ]
    },
    {
      "type": "stat",
      "title": "Latency p95 (ms)",
      "gridPos": {
        "x": 16,
        "y": 0,
        "w": 8,
        "h": 6
      },
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "targets": [
        {
          "expr": "1e3 * histogram_quantile(0.95, sum by (le) (rate(http_server_duration_bucket{service_name=~\"$service\"}[$__rate_interval])))",
          "legendFormat": "p95"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": ".NET GC Heap (MB)",
      "gridPos": {
        "x": 0,
        "y": 6,
        "w": 12,
        "h": 8
      },
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "fieldConfig": {
        "defaults": { "unit": "mebibytes" },
        "overrides": []
      },
      "targets": [
        {
          "expr": "sum(process_runtime_dotnet_gc_heap_size{service_name=~\"$service\"}) / 1024 / 1024",
          "legendFormat": "{{service_name}}"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": ".NET GC Collections / sec",
      "gridPos": {
        "x": 12,
        "y": 6,
        "w": 12,
        "h": 8
      },
      "datasource": {
        "type": "prometheus",
        "uid": "prometheus"
      },
      "targets": [
        {
          "expr": "sum(rate(process_runtime_dotnet_gc_collections_count{service_name=~\"$service\"}[$__rate_interval]))",
          "legendFormat": "{{service_name}}"
        }
      ]
    },
    {
      "type": "logs",
      "title": "Recent logs (Loki)",
      "gridPos": {
        "x": 0,
        "y": 14,
        "w": 24,
        "h": 10
      },
      "datasource": {
        "type": "loki",
        "uid": "loki"
      },
      "options": {
        "showLabels": true,
        "wrapLogMessage": true
      },
      "targets": [
        { "expr": "{service=~\"$service\"}" }
      ]
    }
  ]
}
