# azure-pipelines-database.yml
trigger:
  branches: { include: [ main ] }
  paths:    { include: [ 'HoneyHub.Platform/Domains/Users/HoneyHub.Users.Database/**', '**/*.sqlproj' ] }
pr: none

pool:
  vmImage: windows-latest

variables:
- group: HoneyHub-Dev
- name: buildConfiguration
  value: Release
- name: sqlprojPath
  value: HoneyHub.Platform/Domains/Users/HoneyHub.Users.Database/HoneyHub.Users.Database.sqlproj
- name: dacpacOutDir
  value: '$(Build.ArtifactStagingDirectory)\dacpac\'
- name: azureSubscriptionServiceConnection
  value: HoneyDrunk-Dev-ARM

stages:
# ────────────────────────────────────────────────────────────────────────────────
- stage: Build_DACPAC
  displayName: Build DACPAC
  jobs:
  - job: Build
    displayName: Build .sqlproj
    steps:
    - task: VSBuild@1
      displayName: 'Build $(sqlprojPath)'
      inputs:
        solution: '$(sqlprojPath)'
        msbuildArgs: >
          /t:Build
          /p:Configuration=$(buildConfiguration)
          /p:Platform="Any CPU"
          /p:OutDir=$(dacpacOutDir)
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'
        clean: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish DACPAC artifact'
      inputs:
        targetPath: '$(dacpacOutDir)'
        artifact: 'DatabaseDacpac'

# ────────────────────────────────────────────────────────────────────────────────
- stage: Deploy_DEV
  displayName: Deploy to DEV
  dependsOn: Build_DACPAC
  jobs:
  - deployment: DbDeployDEV
    displayName: 'Azure SQL deploy (DEV)'
    environment: DEV
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: DatabaseDacpac

          - pwsh: |
              $sc = '$(azureSubscriptionServiceConnection)'
              $cs = '$(db-admin-user-connstring)'
              if ([string]::IsNullOrWhiteSpace($sc)) { throw "azureSubscriptionServiceConnection is empty." }
              if ([string]::IsNullOrWhiteSpace($cs)) { throw "db-admin-user-connstring is empty." }
              Write-Host "Service connection: $sc"
              Write-Host "Conn string length: $($cs.Length)"
            displayName: 'Preflight variable check'

          - pwsh: |
              $root = '$(Pipeline.Workspace)\DatabaseDacpac'
              $dacpacs = Get-ChildItem -Path $root -Recurse -Filter *.dacpac -File
              if ($dacpacs.Count -eq 0) { throw "No .dacpac found under $root." }
              if ($dacpacs.Count -gt 1) {
                $list = ($dacpacs | ForEach-Object { $_.FullName }) -join "`n"
                throw "Expected exactly 1 .dacpac, found $($dacpacs.Count):`n$list"
              }
              $chosen = $dacpacs[0].FullName
              Write-Host "Using DACPAC: $chosen"
              Write-Host "##vso[task.setvariable variable=FoundDacpacFile]$chosen"
            displayName: 'Locate single DACPAC'

          - task: SqlAzureDacpacDeployment@1
            displayName: 'Deploy DACPAC to DEV'
            inputs:
              # Use ARM connection (this must be an Azure Resource Manager service connection)
              azureSubscription: '$(azureSubscriptionServiceConnection)'

              AuthenticationType: 'connectionString'
              ConnectionString: '$(db-admin-user-connstring)'

              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(FoundDacpacFile)'

              IpDetectionMethod: 'AutoDetect'
              DeleteFirewallRule: true

              AdditionalArguments: >
                /p:BlockOnPossibleDataLoss=true
                /p:DropObjectsNotInSource=false
                /p:AllowIncompatiblePlatform=false

